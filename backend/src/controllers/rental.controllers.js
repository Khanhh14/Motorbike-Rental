const db = require("../config/db");
const cron = require("node-cron");
const { sendRentalAcceptedEmail, sendRentalRejectedEmail } = require("../utils/mailer");

const imageBaseUrl = "http://localhost:5000"; // Ho·∫∑c c√≥ th·ªÉ s·ª≠ d·ª•ng URL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng

exports.getRentals = async (req, res) => {
  try {
    const query = `
      SELECT 
        rentals.id, 
        users.name AS renter_name,
        motorbikes.model AS motorbike_model,
        rentals.start_date,
        rentals.end_date,
        rentals.total_price,
        rentals.status
      FROM rentals
      JOIN users ON rentals.user_id = users.id
      JOIN motorbikes ON rentals.motorbike_id = motorbikes.id
    `;

    const [rows] = await db.query(query);
    res.json(rows);
  } catch (error) {
    console.error("L·ªói l·∫•y danh s√°ch ƒë∆°n thu√™:", error);
    res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch ƒë∆°n thu√™" });
  }
};


// üìå H√†m d√πng cho route truy·ªÅn userId t·ª´ cookie/middleware
exports.getUserRentalsById = async (userId) => {
  const query = `
      SELECT rentals.id, users.name AS renter_name, motorbikes.model AS motorbike_model,
             motorbikes.id AS motorbike_id,  -- ‚úÖ th√™m d√≤ng n√†y
             rentals.start_date, rentals.end_date, rentals.total_price, rentals.status
      FROM rentals
      JOIN motorbikes ON rentals.motorbike_id = motorbikes.id
      JOIN users ON rentals.user_id = users.id
      WHERE rentals.user_id = ?
      ORDER BY rentals.start_date DESC
    `;
  const [rows] = await db.query(query, [userId]);
  return rows;
};


// üö® API: GET /api/rentals/user-rentals
exports.getUserRentals = async (req, res) => {
  try {
    const user_id = req.user.id;

    const sql = `
      SELECT 
        r.id, 
        m.id AS motorbike_id,
        m.model AS motorbike_model,
        m.image_url AS motorbike_image,
        r.start_date, 
        r.end_date, 
        r.total_price, 
        r.status 
      FROM rentals r
      JOIN motorbikes m ON r.motorbike_id = m.id
      WHERE r.user_id = ?
      ORDER BY r.start_date DESC
    `;

    const [results] = await db.query(sql, [user_id]);

    // ‚úÖ Tr·∫£ v·ªÅ c·∫£ danh s√°ch v√† t·ªïng s·ªë
    results.forEach(result => {
      // C·∫≠p nh·∫≠t l·∫°i URL h√¨nh ·∫£nh v·ªõi ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
      result.motorbike_image = `${imageBaseUrl}/uploads/${result.motorbike_image}`;
    });

    res.status(200).json({
      total: results.length,  // T·ªïng s·ªë xe ƒë√£ thu√™
      rentals: results        // Danh s√°ch ƒë∆°n thu√™
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y ƒë∆°n thu√™ c·ªßa ng∆∞·ªùi d√πng:", err);
    res.status(500).json({ message: "L·ªói server!" });
  }
};



// ‚úÖ L·∫•y chi ti·∫øt ƒë∆°n thu√™ theo ID
exports.getRentalById = async (req, res) => {
  const user_id = req.user.id; // L·∫•y user_id t·ª´ token/session
  const { id } = req.params;

  try {
    const [rows] = await db.query(
      `SELECT rentals.*, motorbikes.model AS motorbike_model
       FROM rentals
       JOIN motorbikes ON rentals.motorbike_id = motorbikes.id
       WHERE rentals.id = ? AND rentals.user_id = ?`,
      [id, user_id]
    );

    if (rows.length === 0) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n thu√™" });
    }

    res.json(rows[0]);
  } catch (error) {
    console.error("L·ªói l·∫•y chi ti·∫øt ƒë∆°n thu√™:", error);
    res.status(500).json({ error: "L·ªói l·∫•y chi ti·∫øt ƒë∆°n thu√™" });
  }
};


// ‚úÖ T·∫°o ƒë∆°n thu√™ m·ªõi
// ‚úÖ T·∫°o ƒë∆°n thu√™ m·ªõi
exports.createRental = async ({ body }) => {
  try {
    let { user_id, motorbike_id, start_date, end_date, total_price, name, phone, email } = body;

    // N·∫øu user_id ch∆∞a c√≥ (kh√°ch v√£ng lai), y√™u c·∫ßu th√¥ng tin c√° nh√¢n
    if (!user_id) {
      if (!name || !phone || !email) {
        throw new Error("C·∫ßn nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin c√° nh√¢n ƒë·ªÉ thu√™ xe");
      }

      // T·∫°o t√†i kho·∫£n guest
      const [userResult] = await db.query(
        "INSERT INTO users (name, phone, email, role) VALUES (?, ?, ?, 'guest')",
        [name, phone, email]
      );

      if (!userResult.insertId) {
        throw new Error("Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n guest");
      }

      user_id = userResult.insertId;
    }

    // Ki·ªÉm tra xe c√≥ kh·∫£ d·ª•ng kh√¥ng
    const [motorbike] = await db.query("SELECT price_per_day, status FROM motorbikes WHERE id = ?", [motorbike_id]);

    if (!motorbike.length) {
      throw new Error("Kh√¥ng t√¨m th·∫•y xe");
    }

    if (motorbike[0].status === "Rented") {
      throw new Error("Xe hi·ªán ƒëang ƒë∆∞·ª£c thu√™");
    }

    // T√≠nh t·ªïng gi√° n·∫øu ch∆∞a ƒë∆∞·ª£c g·ª≠i t·ª´ frontend
    if (!total_price) {
      const price_per_day = motorbike[0].price_per_day;
      const days = Math.ceil((new Date(end_date) - new Date(start_date)) / (1000 * 60 * 60 * 24));
      total_price = days > 0 ? days * price_per_day : 0;
    }

    // B·∫Øt ƒë·∫ßu transaction
    await db.query("START TRANSACTION");

    // T·∫°o ƒë∆°n thu√™
    const [rentalResult] = await db.query(
      "INSERT INTO rentals (user_id, motorbike_id, start_date, end_date, total_price, status) VALUES (?, ?, ?, ?, ?, 'pending')",
      [user_id, motorbike_id, start_date, end_date, total_price]
    );

    if (!rentalResult.insertId) {
      throw new Error("L·ªói khi t·∫°o ƒë∆°n thu√™");
    }

    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i xe sang Rented ngay khi ƒë∆°n ·ªü tr·∫°ng th√°i pending
    await db.query("UPDATE motorbikes SET status = 'Rented' WHERE id = ?", [motorbike_id]);

    // Commit transaction
    await db.query("COMMIT");

    return { rentalId: rentalResult.insertId };
  } catch (error) {
    await db.query("ROLLBACK");
    console.error("L·ªói t·∫°o ƒë∆°n thu√™:", error);
    throw error;
  }
};



// ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n thu√™
exports.updateRentalStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  if (!["pending","ongoing", "canceled", "completed"].includes(status)) {
    return res.status(400).json({ error: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá" });
  }

  try {
    // L·∫•y th√¥ng tin ƒë∆°n thu√™ v√† ng∆∞·ªùi thu√™
    const [rental] = await db.query(
      `SELECT rentals.*, users.name AS user_name, users.email, motorbikes.model AS motorbike_model
       FROM rentals
       JOIN users ON rentals.user_id = users.id
       JOIN motorbikes ON rentals.motorbike_id = motorbikes.id
       WHERE rentals.id = ?`,
      [id]
    );

    if (rental.length === 0) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n thu√™" });
    }

    const motorbike_id = rental[0].motorbike_id;

    await db.query("START TRANSACTION");
    await db.query("UPDATE rentals SET status = ? WHERE id = ?", [status, id]);

    const newMotorbikeStatus = status === "ongoing" || status === "pending" ? "Rented" : "Available";
    await db.query("UPDATE motorbikes SET status = ? WHERE id = ?", [newMotorbikeStatus, motorbike_id]);
    await db.query("COMMIT");

    // ‚úÖ G·ª≠i email n·∫øu tr·∫°ng th√°i l√† "ongoing"
    if (status === "ongoing" && rental[0].email) {
      await sendRentalAcceptedEmail(
        rental[0].email,
        rental[0].user_name,
        rental[0].motorbike_model,
        rental[0].start_date,
        rental[0].end_date
      );
    }

    // ‚úÖ G·ª≠i email n·∫øu tr·∫°ng th√°i l√† "canceled"
    if (status === "canceled" && rental[0].email) {
      await sendRentalRejectedEmail(
        rental[0].email,
        rental[0].user_name,
        rental[0].motorbike_model,
        rental[0].start_date,
        rental[0].end_date
      );
    }

    res.json({ message: `C·∫≠p nh·∫≠t tr·∫°ng th√°i ${status} th√†nh c√¥ng` });
  } catch (error) {
    await db.query("ROLLBACK");
    console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
    res.status(500).json({ error: "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i" });
  }
};


// ‚úÖ X√≥a ƒë∆°n thu√™ theo ID
exports.deleteRental = async (req, res) => {
  const { id } = req.params;

  try {
    const [rental] = await db.query("SELECT motorbike_id FROM rentals WHERE id = ?", [id]);

    if (rental.length === 0) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n thu√™" });
    }

    const motorbike_id = rental[0].motorbike_id;

    await db.query("START TRANSACTION");
    await db.query("DELETE FROM rentals WHERE id = ?", [id]);
    await db.query("UPDATE motorbikes SET status = 'Available' WHERE id = ?", [motorbike_id]);
    await db.query("COMMIT");

    res.json({ message: "X√≥a ƒë∆°n thu√™ th√†nh c√¥ng!" });
  } catch (error) {
    await db.query("ROLLBACK");
    console.error("L·ªói x√≥a ƒë∆°n thu√™:", error);
    res.status(500).json({ error: "L·ªói x√≥a ƒë∆°n thu√™" });
  }
};


// ‚úÖ Auto c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n thu√™
const autoUpdateRentalStatus = async () => {
  try {
    const now = new Date(); // L·∫•y th·ªùi gian hi·ªán t·∫°i

    // L·∫•y danh s√°ch ƒë∆°n thu√™ ƒë√£ h·∫øt h·∫°n (theo gi·ªù)
    const [expiredRentals] = await db.query(
      "SELECT id, motorbike_id FROM rentals WHERE status = 'ongoing' AND end_date <= NOW()"
    );

    if (expiredRentals.length > 0) {
      await db.query("START TRANSACTION");
      await db.query(
        "UPDATE rentals SET status = 'completed' WHERE status = 'ongoing' AND end_date <= NOW()"
      );
      await db.query(
        "UPDATE motorbikes SET status = 'Available' WHERE id IN (?)",
        [expiredRentals.map((r) => r.motorbike_id)]
      );
      await db.query("COMMIT");

      console.log(`ƒê√£ c·∫≠p nh·∫≠t ${expiredRentals.length} ƒë∆°n thu√™ h·∫øt h·∫°n.`);
    }
  } catch (error) {
    await db.query("ROLLBACK");
    console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª± ƒë·ªông:", error);
  }
};


// Gi·ªØ nguy√™n cron job
cron.schedule("* * * * *", autoUpdateRentalStatus, {
  scheduled: true,
  timezone: "Asia/Ho_Chi_Minh",
});

